{"version":3,"sources":["assets/image/my_photo.png","components/Header.tsx","components/Profile.tsx","components/Instagram.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Wrap","styled","div","Header","AppBar","position","color","Toolbar","Grid","container","direction","justify","alignItems","href","IconButton","aria-label","StyledAvatar","Avatar","TextWrap","TitleWrap","Profile","alt","src","my_photo","Instagram","url","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,0SCkB3C,IAAMC,EAAOC,IAAOC,IAAV,KA0CKC,EAtCiB,WAC9B,OACE,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,eACRC,WAAW,UAGX,2CACA,6BACE,uBAAGC,KAAK,4CACN,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAAST,MAAM,WACpC,kBAAC,IAAD,QAIJ,uBAAGO,KAAK,8BACN,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAAST,MAAM,WACpC,kBAAC,IAAD,QAIJ,uBAAGO,KAAK,6BACN,kBAACC,EAAA,EAAD,CAAYC,aAAW,SAAST,MAAM,WACpC,kBAAC,IAAD,c,qoBC7ClB,IAAMN,EAAOC,IAAOC,IAAV,KAKJc,EAAef,YAAOgB,IAAPhB,CAAH,KAQZiB,EAAWjB,IAAOC,IAAV,KASRiB,EAAYlB,IAAOC,IAAV,KAmBAkB,EAZW,WACxB,OACE,kBAAC,EAAD,KACE,kBAACJ,EAAD,CAAcK,IAAI,aAAaC,IAAKC,MACpC,kBAACJ,EAAD,mBACA,kBAACD,EAAD,0L,yICnCN,IAAMlB,EAAOC,IAAOC,IAAV,KAwBKsB,EAlBa,WAC1B,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CACEC,IAAI,2CACJC,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,iB,yVChBnB,IAAMC,EAAcC,YAAH,KA8BFC,MAff,WACE,OACE,oCACE,kBAACF,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCnBcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4ee7f52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/my_photo.215286db.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\ntype Props = {\n  value?: string\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Wrap = styled.div`\n  font-size: 20;\n`;\n\nconst Header: React.FC<Props> = () => {\n  return (\n    <Wrap>\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"center\"\n          >\n            {/* <Typography variant=\"h6\">Aki Yamada</Typography> */}\n            <div>Aki Yamada</div>\n            <div>\n              <a href=\"https://www.instagram.com/akistagram_jp/\">\n                <IconButton aria-label=\"delete\" color=\"default\">\n                  <InstagramIcon />\n                </IconButton>\n              </a>\n\n              <a href=\"https://twitter.com/akiy_8\">\n                <IconButton aria-label=\"delete\" color=\"default\">\n                  <TwitterIcon />\n                </IconButton>\n              </a>\n\n              <a href=\"https://github.com/akkie8\">\n                <IconButton aria-label=\"delete\" color=\"default\">\n                  <GitHubIcon />\n                </IconButton>\n              </a>\n            </div>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </Wrap>\n  );\n};\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport my_photo from '../assets/image/my_photo.png';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst Wrap = styled.div`\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nconst StyledAvatar = styled(Avatar)`\n  && {\n    margin: 0 auto 30px;\n    width: 200px;\n    height: 200px;\n  }\n`;\n\nconst TextWrap = styled.div`\n  width: 300px;\n  font-size: 14px;\n  font-weight: bold;\n  margin: auto;\n  text-align: center;\n  word-break: keep-all;\n`;\n\nconst TitleWrap = styled.div`\n  font-size: 20px;\n  margin-bottom: 10px;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst Profile: React.FC = () => {\n  return (\n    <Wrap>\n      <StyledAvatar alt=\"Aki Yamada\" src={my_photo} />\n      <TitleWrap>Aki Yamada</TitleWrap>\n      <TextWrap>\n        1990生まれ フリーランス フロントエンドエンジニア\n        デジタルノマド\n      </TextWrap>\n    </Wrap>\n  );\n};\nexport default Profile;\n","import React from 'react';\nimport styled from 'styled-components';\nimport InstagramEmbed from 'react-instagram-embed';\n\nconst Wrap = styled.div`\n  margin-bottom: 50px;\n  margin: auto;\n  width: 400px;\n`;\n\nconst Instagram: React.FC = () => {\n  return (\n    <Wrap>\n      <InstagramEmbed\n        url=\"https://www.instagram.com/p/B862xVgpWpv/\"\n        maxWidth={400}\n        hideCaption={true}\n        containerTagName=\"div\"\n        protocol=\"\"\n        injectScript\n        onLoading={() => {}}\n        onSuccess={() => {}}\n        onAfterRender={() => {}}\n        onFailure={() => {}}\n      />\n    </Wrap>\n  );\n};\nexport default Instagram;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport Header from './components/Header';\nimport Profile from './components/Profile';\nimport Instagram from './components/Instagram';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    position: relative;\n    color: #333333;\n    background-color: #ffffff;\n    font-size: 100%;\n    line-height: 1.7;\n    -webkit-text-size-adjust: 100%;\n    font-family: \"Sawarabi Gothic\";\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n\n      <Header />\n\n      <Profile />\n\n      <Instagram />\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}